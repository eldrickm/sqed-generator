-------
License
-------

TBA.

TODO: We must make sure to include the official SQED license for the
generic module. However, for single instruction checking we want to
use a BSD license since that should not be depending on any code we
develop for SQED.

-------------------
General information
-------------------

This repository contains material related to our planned generic SQED
module.

Based on discussions, we envision two possible ways to implement a
generic QED module:

1.) A generic implementation in Verilog that can is parameterized by
    design specific properties such instruction format, opcodes,
    instruction types, etc.

2.) A compilation approach where the designer specifies the ISA of the
    given design in a predefined, structured format that we
    formulate. We implement a tool that parses the specification file
    provided by the designer in our format and automatically generates
    the Verilog sources of the QED module of the given design.

    File 'notes-on-compilation-workflow.txt' contains some notes on
    that approach.

The difference between these two approaches is that the
parameterization if either reflected directly in Verilog (1.) or in
the specification file from which customized Verilog sources are
generated (2.).

Either of the above variants should result in a generic QED module
that is easily customizable.

Update 26 April 2019:

The QED-ready signal depends on the ISA and the pipeline design since
it keeps track of when the same number of original and duplicate
instructions have committed (e.g., see file 'pipeline.v' in the
Ridecore demo). It is not obvious how to properly handle the QED-ready
signal in our generic module since the necessary modifications of the
Verilog source cannot easily be generated by our workflow.

Update 15 April 2019:

The submodule for single instruction checking can be kept separate
from the other ones in the beginning, and its development will also be
separate. Currently we have single instruction checking only for
Ridecore. We will apply it to at least one other design first before
identifying the necessary parts that can be made generic.

Update 12 April 2019:

TODO: in the end, we need a licensing policy similar to the the SQED
demo for ridecore, where the SQED module has a special license.

We plan to integrate a submodule for generic single instruction
checking. In a related project, we are working on single instruction
checking for RIDECORE (RISC-V). However, RIDECORE does not implement
floating-point instructions, and hence we will not have any properties for
RIDECORE that we could abstract and reuse for the generic
submodule. However, in the submodule, we should provide generic checks
for floating-point instructions in order to make our generic module widely
applicable.

Update 4 April 2019:

We need to make sure that the implementation of the generic module
uses standard Verilog that can be handled by the Yosys tool (we use
Yosys also in our model checker CoSA):

http://www.clifford.at/yosys/

The instruction constraints files ('inst_constraint.sv') contain some
basic SystemVerilog assertions.

Update 2 April 2019:

We want to eventually combine approaches 1.) and 2.), where the
generic QED module is set up following approach 1.) and design
specific submodules that have to be hooked up to the generic module
are automatically generated from a specification file by approach 2.).

---------------------------
Organization of repository:
---------------------------

Directory 'custom-sqed-modules':

A collection of QED modules (Verilog sources) that we already
have. These modules are custom for particular designs.

Directory 'generic-sqed-modules':

Verilog sources of the generic QED module will be put here.

Directory 'doc':

A collection of ISA specification documents that we will need to
formulate the generic QED module

Directory 'isa-constraints':

Instruction constraints files of the custom QED modules we have
collected.

Directory 'isa-input-templates':

Structured specification file format (only relevant if we go for
variant 2. above).

Directory 'materials':

Contains various material related to SQED such as slides etc.
